/// 3. Longest Substring Without Repeating Characters
/// Given a string, find the length of the longest substring without repeating characters.

/// Example 1:

/// Input: "abcabcbb"
/// Output: 3 
/// Explanation: The answer is "abc", with the length of 3. 
/// Example 2:

/// Input: "bbbbb"
/// Output: 1
/// Explanation: The answer is "b", with the length of 1.
/// Example 3:

/// Input: "pwwkew"
/// Output: 3
/// Explanation: The answer is "wke", with the length of 3. 
/// Note that the answer must be a substring, "pwke" is a subsequence and not a substring.

public class Solution {
    public int LengthOfLongestSubstring(string s) {
        if (string.IsNullOrEmpty(s))
                return 0;

        int lenLS = 1;
        HashSet<char> hashSet = new HashSet<char>();
        Hashtable hashtable = new Hashtable();
        for (int i = 0; i < s.Length; i++)
        {
            if (!hashSet.Contains(s[i]))
            {
                hashSet.Add(s[i]);
                if (!hashtable.ContainsKey(s[i]))
                    hashtable.Add(s[i], i);
                else
                    hashtable[s[i]] = i;
            }
            else
            {
                hashSet.Clear();
                if (i - Convert.ToInt32(hashtable[s[i]]) == 1)
                    hashSet.Add(s[i]);
                else
                    for (int j = i; j > Convert.ToInt32(hashtable[s[i]]); j--)
                        if (j >= 0)
                            hashSet.Add(s[j]);
                lenLS = Math.Max(lenLS, i - Convert.ToInt32(hashtable[s[i]]));
                hashtable[s[i]] = i;
            }

            lenLS = Math.Max(lenLS, hashSet.Count);
        }
        return lenLS;
    }
}